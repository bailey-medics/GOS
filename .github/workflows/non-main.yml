name: Non-main branch workflows

on:
  push:
    branches-ignore: [main, master]
  pull_request:
    branches-ignore: [main, master]

permissions:
  contents: write

concurrency:
  group: nonmain-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- Code Quality Checks ----------
  rust_quality_checks:
    runs-on: ubuntu-latest
    name: Rust Quality Checks
    strategy:
      matrix:
        check: [formatting, linting, compilation, tests]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # Cache protoc installation
      - name: Cache protoc
        id: cache-protoc
        uses: actions/cache@v4
        with:
          path: ~/protoc
          key: protoc-${{ runner.os }}-v25.1
          restore-keys: |
            protoc-${{ runner.os }}-

      # Install protoc only if not cached
      - name: Install protoc
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          echo "Installing protoc (not found in cache)..."
          mkdir -p ~/protoc
          cd ~/protoc
          curl -L https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-linux-x86_64.zip -o protoc.zip
          unzip protoc.zip
          chmod +x bin/protoc
          echo "protoc installed to ~/protoc/bin/protoc"
          
      # Add protoc to PATH
      - name: Setup protoc PATH
        run: |
          echo "$HOME/protoc/bin" >> $GITHUB_PATH
          echo "PROTOC=$HOME/protoc/bin/protoc" >> $GITHUB_ENV

      # Cache Rust dependencies and build artifacts
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run formatting check
        if: matrix.check == 'formatting'
        run: |
          echo "🔧 Checking code formatting..."
          cargo fmt --all -- --check

      - name: Run linting
        if: matrix.check == 'linting'
        run: |
          echo "🔍 Running Clippy linter..."
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Run compilation check
        if: matrix.check == 'compilation'
        run: |
          echo "🔧 Checking compilation..."
          cargo check --all-targets --all-features

      - name: Run tests
        if: matrix.check == 'tests'
        run: |
          echo "🧪 Running tests..."
          cargo test --all-features

  # ---------- Merge to main (only on push, never from main) ----------
  merge-to-main:
    runs-on: ubuntu-latest
    name: Merge branch into main
    needs: [rust_quality_checks]
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Merge branch into main and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure we have latest main locally
          git fetch origin main:main || git fetch origin refs/heads/main:main

          # Source branch name from the push event
          BRANCH_NAME="${GITHUB_REF_NAME:-}"
          BRANCH_NAME=$(echo "$BRANCH_NAME" | tr -d '[:space:]')

          if [ -z "$BRANCH_NAME" ]; then
            echo "ERROR: Cannot determine source branch." >&2
            exit 1
          fi

          if [ "$BRANCH_NAME" = "main" ]; then
            echo "Not merging main into main. Exiting."
            exit 0
          fi

          echo "Merging '$BRANCH_NAME' into main"
          git checkout main

          # Ensure the source branch exists locally
          if ! git rev-parse --verify --quiet "$BRANCH_NAME"; then
            echo "Fetching branch '$BRANCH_NAME' from origin"
            git fetch origin "$BRANCH_NAME":"$BRANCH_NAME"
          fi

          # Attempt merge; on conflict, abort and fail
          if git merge --no-ff "$BRANCH_NAME" -m "Merge branch '$BRANCH_NAME' into main"; then
            echo "Merge succeeded"
          else
            echo "Merge conflict. Aborting."
            git merge --abort || true
            exit 1
          fi

          git push origin main
