name: Build and Deploy Documentation.

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write        # needed for Pages deploy
  id-token: write     # needed for OIDC auth

concurrency:
  group: pages
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

# .github/workflows/docs.yml (snippet)
jobs:
  build-and-deploy-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # Cache protoc installation
      - name: Cache protoc
        id: cache-protoc
        uses: actions/cache@v4
        with:
          path: ~/protoc
          key: protoc-${{ runner.os }}-v25.1
          restore-keys: |
            protoc-${{ runner.os }}-

      # Install protoc only if not cached
      - name: Install protoc
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          echo "📥 Installing protoc (not found in cache)..."
          mkdir -p ~/protoc
          cd ~/protoc
          curl -L https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-linux-x86_64.zip -o protoc.zip
          unzip protoc.zip
          chmod +x bin/protoc
          echo "✅ protoc installed to ~/protoc/bin/protoc"
          
      # Add protoc to PATH
      - name: Setup protoc PATH
        run: |
          echo "$HOME/protoc/bin" >> $GITHUB_PATH
          echo "PROTOC=$HOME/protoc/bin/protoc" >> $GITHUB_ENV

      # Cache Rust dependencies and build artifacts
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Cache generated documentation
      - name: Cache doc artifacts
        uses: actions/cache@v4
        with:
          path: target/doc
          key: ${{ runner.os }}-docs-${{ hashFiles('src/**/*.rs', 'Cargo.toml', 'build.rs', 'proto/**/*.proto') }}
          restore-keys: |
            ${{ runner.os }}-docs-

      # Show cache status for debugging
      - name: Show cache status
        run: |
          echo "🗂️ Cache Status Report:"
          echo "Protoc cache hit: ${{ steps.cache-protoc.outputs.cache-hit }}"
          echo "Protoc version: $(protoc --version 2>/dev/null || echo 'not found')"
          echo "Protoc location: $(which protoc 2>/dev/null || echo 'not in PATH')"
          echo "Cargo cache: $(ls -la ~/.cargo/bin/ 2>/dev/null | wc -l || echo '0') cached binaries"
          echo "Build cache: $(ls -la target/ 2>/dev/null | wc -l || echo '0') cached artifacts"

      - name: Build docs for gos only (no deps)
        env:
          RUSTDOCFLAGS: "-Dwarnings --cfg docsrs --html-in-header doc-header.html"
          CARGO_INCREMENTAL: "0"  # Disable incremental compilation for better caching
          CARGO_NET_RETRY: "10"   # Retry network requests
        run: |
          echo "⏱️ Starting documentation build at $(date)"
          start_time=$(date +%s)
          
          # Create custom doc header for better styling
          cat > doc-header.html <<'HTML'
          <style>
          .rustdoc-toggle > summary {
            font-weight: 600;
          }
          .search-input {
            border-radius: 6px;
          }
          </style>
          HTML
          
          # Build with optimized flags for documentation
          echo "🔨 Building documentation..."
          echo "Using protoc: $(which protoc) ($(protoc --version))"
          cargo doc --no-deps --all-features --package gos --lib --jobs 2
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "✅ Documentation build completed in ${duration} seconds"
          
          # Show build cache effectiveness
          if [ -d "target/doc" ]; then
            echo "📊 Generated documentation: $(du -sh target/doc | cut -f1)"
          fi
          
          mkdir -p public
          cp -r target/doc/* public/
          
          # Create a better landing page
          cat > public/index.html <<'HTML'
          <!doctype html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>GOS Documentation</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                margin: 0;
                padding: 40px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
              }
              .container {
                text-align: center;
                background: rgba(255,255,255,0.1);
                padding: 60px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
              }
              h1 { font-size: 3em; margin-bottom: 20px; }
              p { font-size: 1.2em; margin-bottom: 30px; }
              a {
                color: white;
                text-decoration: none;
                background: rgba(255,255,255,0.2);
                padding: 15px 30px;
                border-radius: 50px;
                font-weight: 600;
                transition: all 0.3s ease;
                display: inline-block;
              }
              a:hover {
                background: rgba(255,255,255,0.3);
                transform: translateY(-2px);
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>🦀 GOS Documentation</h1>
              <p>gRPC Health Service - Fast, Reliable, Production Ready</p>
              <a href="gos/">Enter Documentation →</a>
            </div>
          </body>
          </html>
          HTML

      # Cache the public directory for faster uploads
      - name: Cache public directory
        uses: actions/cache@v4
        with:
          path: public
          key: ${{ runner.os }}-public-${{ hashFiles('public/**/*') }}
          restore-keys: |
            ${{ runner.os }}-public-

      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with: 
          path: public
          retention-days: 7  # Reduce storage costs
  deploy:
    needs: build-and-deploy-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
