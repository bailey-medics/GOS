name: Build and Deploy Documentation.

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write        # needed for Pages deploy
  id-token: write     # needed for OIDC auth

concurrency:
  group: pages
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

# .github/workflows/docs.yml (snippet)
jobs:
  build-and-deploy-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # Cache protoc installation
      - name: Cache protoc
        id: cache-protoc
        uses: actions/cache@v4
        with:
          path: ~/protoc
          key: protoc-${{ runner.os }}-v25.1
          restore-keys: |
            protoc-${{ runner.os }}-

      # Install protoc only if not cached
      - name: Install protoc
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          echo "üì• Installing protoc (not found in cache)..."
          mkdir -p ~/protoc
          cd ~/protoc
          curl -L https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-linux-x86_64.zip -o protoc.zip
          unzip protoc.zip
          chmod +x bin/protoc
          echo "‚úÖ protoc installed to ~/protoc/bin/protoc"
          
      # Add protoc to PATH
      - name: Setup protoc PATH
        run: |
          echo "$HOME/protoc/bin" >> $GITHUB_PATH
          echo "PROTOC=$HOME/protoc/bin/protoc" >> $GITHUB_ENV

      # Cache Rust dependencies and build artifacts
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Cache generated documentation
      - name: Cache doc artifacts
        uses: actions/cache@v4
        with:
          path: target/doc
          key: ${{ runner.os }}-docs-${{ hashFiles('src/**/*.rs', 'Cargo.toml', 'build.rs', 'proto/**/*.proto') }}
          restore-keys: |
            ${{ runner.os }}-docs-

      # Show cache status for debugging
      - name: Show cache status
        run: |
          echo "üóÇÔ∏è Cache Status Report:"
          echo "Protoc cache hit: ${{ steps.cache-protoc.outputs.cache-hit }}"
          echo "Protoc version: $(protoc --version 2>/dev/null || echo 'not found')"
          echo "Protoc location: $(which protoc 2>/dev/null || echo 'not in PATH')"
          echo "Cargo cache: $(ls -la ~/.cargo/bin/ 2>/dev/null | wc -l || echo '0') cached binaries"
          echo "Build cache: $(ls -la target/ 2>/dev/null | wc -l || echo '0') cached artifacts"

      - name: Build docs for gos only (no deps)
        env:
          RUSTDOCFLAGS: "-Dwarnings --cfg docsrs --html-in-header doc-header.html"
          CARGO_INCREMENTAL: "0"  # Disable incremental compilation for better caching
          CARGO_NET_RETRY: "10"   # Retry network requests
        run: |
          echo "‚è±Ô∏è Starting documentation build at $(date)"
          start_time=$(date +%s)
          
          # Create custom doc header for better styling
          cat > doc-header.html <<'HTML'
          <style>
          .rustdoc-toggle > summary {
            font-weight: 600;
          }
          .search-input {
            border-radius: 6px;
          }
          </style>
          HTML
          
          # Build with optimized flags for documentation
          echo "üî® Building documentation..."
          echo "Using protoc: $(which protoc) ($(protoc --version))"
          cargo doc --no-deps --all-features --package gos --lib --jobs 2
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "‚úÖ Documentation build completed in ${duration} seconds"
          
          # Show build cache effectiveness
          if [ -d "target/doc" ]; then
            echo "üìä Generated documentation: $(du -sh target/doc | cut -f1)"
          fi
          
          mkdir -p public
          
          # Copy all documentation files
          cp -r target/doc/* public/
          
          # Move the gos documentation to the root level
          if [ -d "public/gos" ]; then
            # Copy gos content to root, then clean up
            cp -r public/gos/* public/
            # Keep the gos directory for any remaining references
            echo "‚úÖ GOS documentation moved to root level"
          else
            echo "‚ùå Warning: gos directory not found in documentation"
          fi

      # Cache the public directory for faster uploads
      - name: Cache public directory
        uses: actions/cache@v4
        with:
          path: public
          key: ${{ runner.os }}-public-${{ hashFiles('public/**/*') }}
          restore-keys: |
            ${{ runner.os }}-public-

      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with: 
          path: public
          retention-days: 7  # Reduce storage costs
  deploy:
    needs: build-and-deploy-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
